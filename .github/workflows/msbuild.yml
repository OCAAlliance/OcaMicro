name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./OCACompliancyTestTool/Aes70CompliancyTestTool.sln
  INSTALLER_FILE_PATH: ./OCACompliancyTestTool/Installer/Aes70CompliancyTestTool.sln
  
  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  windows-build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Install Doxygen
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: "install doxygen.install --ignore-checksums --version=1.9.3"

    - name: Install HTML help workshop
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: "install html-help-workshop --version=1.32.1"

    - name: Generate doxygen output
      shell: cmd
      run : |
        cd OCACompliancyTestTool
        mkdir Out
        "C:\Program Files\doxygen\bin\doxygen.exe" "Aes70CompliancyTestToolConsoleDocumentation.doxygen"

    - name: Build_x86
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /property:Platform=x86 ${{env.SOLUTION_FILE_PATH}}

    - name: Build_x64
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /property:Platform=x64 ${{env.SOLUTION_FILE_PATH}}

    - name: Install WixToolset
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: "install wixtoolset --version=3.11.2"

    - name: Build_x86_installer
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /property:Platform=x86 ${{env.INSTALLER_FILE_PATH}}

    - name: Build_x64_installer
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /property:Platform=x64 ${{env.INSTALLER_FILE_PATH}}

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest-windows"
        prerelease: true
        title: "Development Windows Build"
        files: |
          ./OCACompliancyTestTool/Out/Installer/Aes70 Compliancy Test Tool Console Installer64/en-us/SetupAes70CompliancyTestToolConsole64.msi
          ./OCACompliancyTestTool/Out/Installer/Aes70 Compliancy Test Tool Console Installer/en-us/SetupAes70CompliancyTestToolConsole.msi

  linux-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: install dependencies
      run: | 
        cd /opt
        wget -q "https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2"
        tar -jxf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
        rm gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
        export PATH="/opt/gcc-arm-none-eabi-10.3-2021.10/bin:$PATH"
        export
        ls -l /opt/gcc-arm-none-eabi-10.3-2021.10/bin

    - name: Make
      run: |
        export
        export PATH="/opt/gcc-arm-none-eabi-10.3-2021.10/bin:$PATH"
        arm-none-eabi-gcc --version
        make --version
        cd OCAMicro/OCAMicro
        export OCA_HOME=`pwd`
        cd Src
        make stm32Release
        stat ../Obj/stm32App/Release/OCALiteProto.bin

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest-linux"
        prerelease: true
        title: "Development Linux Build"
        files: |
          ./OCAMicro/OCAMicro/Obj/stm32App/Release/OCALiteProto.bin
